services:
  # Main application services
  database:
    image: postgres:15-alpine
    container_name: todo-database-test
    environment:
      POSTGRES_DB: todo_db
      POSTGRES_USER: todo_user
      POSTGRES_PASSWORD: todo_password
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ../init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U todo_user -d todo_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: todo-backend-test
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: todo_db
      DB_USER: todo_user
      DB_PASSWORD: todo_password
    ports:
      - "3004:3001"
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3001/api/tasks', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - test-network

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: todo-frontend-test
    environment:
      VITE_API_URL: http://localhost:3004/api
    ports:
      - "3005:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - test-network

  # E2E Test Runner
  e2e-tests:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: todo-e2e-tests
    environment:
      CI: true
    ports:
      - "9324:9323"
    depends_on:
      frontend:
        condition: service_healthy
    volumes:
      - ./test-results:/app/test-results
    networks:
      - test-network
    command: >
      sh -c "
        echo 'Waiting for services to be ready...' &&
        sleep 10 &&
        npx playwright test --reporter=html
      "

volumes:
  postgres_test_data:

networks:
  test-network:
    driver: bridge
